@page "/DeleteRecepciones"
@page "/DeleteRecepciones/{RecepcionId:int}"
@inject RecepcionesServices recepcionesService
@inject NavigationManager navigationManager
@inject NotificationService NotificationService
@inject IJSRuntime IJSRuntime
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]


<RadzenNotification />
<PageTitle>Detalles de Recepciones</PageTitle>
<div class="container">
    <div class="card shadow-header">
        <!-- Header -->
        <div class="card-header">
            <h3><strong>Eliminar de Recepcion</strong></h3>
        </div>
        <div class="card-header">
            <h3 class="text-danger">¿Est&aacute;s seguro de que quieres eliminar la recepci&oacute;n?</h3>
        </div>
        <!-- Cuerpo -->
        <div class="card-body">
            <div class="row">
                <div class="col-8">
                    <div class="col-md-11">
                        <h3 class="text-center"><strong>Datos de la recepci&oacute;n</strong></h3>
                        <div class="border-primmary border border-2 borde">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-2">
                                        <div class="text-center">
                                            <img src="Images/ventas.png" alt="Imagen" class="img-fluid img-thumbnail" style="width: 100px; height: auto;">
                                        </div>
                                    </div>
                                    <div class="col-9">
                                        <ul class="list-unstyled" style="margin-top: 20px; margin-bottom: 20px;">
                                            <li><strong>Recepci&oacute;n Id: @recepcion.RecepcionId</strong></li>
                                            <li><strong>Producto: @recepcion.ProductoId</strong></li>
                                            <li><strong>Concepto: @recepcion.Concepto</strong></li>
                                            <li><strong>Direcci&oacute;n: @recepcion.Direccion</strong></li>
                                            <li><strong>Tel&eacute;fono: @recepcion.Telefono</strong></li>
                                            <li><strong>Cantidad: @recepcion.Cantidad</strong> </li>
                                            <li><strong>Fecha: @recepcion.Fecha</strong></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer -->
        <div class="card-footer">
            <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="bi bi-trash-fill"></i> Eliminar</button>
            <button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left"></i> Volver</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int RecepcionId { get; set; }
    public Recepciones recepcion { get; set; } = new Recepciones();

    protected override async Task OnInitializedAsync()
    {
        if (RecepcionId > 0)
        {
            recepcion.RecepcionId = RecepcionId;
            await this.Buscar();
        }
    }
    public async Task Buscar()
    {
        var recepcionEncontrada = await recepcionesService.Buscar(recepcion.RecepcionId);

        if (recepcionEncontrada != null)
        {
            this.recepcion = recepcionEncontrada;
        }
    }

    public async Task Eliminar()
    {
        if (!await recepcionesService.Existe(RecepcionId))
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "La recepción no existe.",
                    Duration = 5000
                };
            NotificationService.Notify(mensajeError);
            return;
        }

        if (await recepcionesService.Eliminar(recepcion))
        {
            var mensajeExito = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Éxito",
                    Detail = "La recepción se eliminó correctamente.",
                    Duration = 5000
                };
            NotificationService.Notify(mensajeExito);
            Volver();
        }
        else
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Ocurrió un error al eliminar la recepción.",
                    Duration = 5000
                };
            NotificationService.Notify(mensajeError);
        }
    }

    public void Volver()
    {
        navigationManager.NavigateTo("/IndexRecepciones");
    }

}

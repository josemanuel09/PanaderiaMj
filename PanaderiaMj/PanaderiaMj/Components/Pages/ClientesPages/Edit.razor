@page "/EditClientes"
@page "/EditClientes/{ClienteId:int}"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject ClientesServices clienteservice
@inject IJSRuntime jsRuntime
@inject NotificationService NotificationService


<RadzenNotification />
<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card" style="max-width: 1000px; margin: 0 auto;">
        <div class="card-header" style="background-color: #5D5C61; color: white; text-align: center;">
            <img src="/Images/clientes.png" alt="Titulo" style="max-width: 50%; height: auto; margin-bottom: 10px;">
            <h1>Editar Cliente</h1>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label><strong>Fecha de Ingreso:</strong></label>
                        <InputDate @bind-Value="cliente.FechaCreacion" class="form-control" />
                        <ValidationMessage For="@(() => cliente.FechaCreacion)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label><strong>Nombre del cliente:</strong></label>
                        <InputText @bind-Value="cliente.Nombre" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Nombre)" />
                    </div>
                    <div class="form-group">
                        <label><strong>Apellido:</strong></label>
                        <InputText @bind-Value="cliente.Apellido" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Apellido)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label><strong>C&eacute;dula:</strong></label>
                        <InputText @bind-Value="cliente.Cedula" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Cedula)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label><strong>Tel&eacute;fono:</strong></label>
                        <InputText @bind-Value="cliente.Telefono" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Telefono)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label><strong>Email:</strong></label>
                        <InputText @bind-Value="cliente.Email" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Email)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label><strong>Direcci&oacute;n:</strong></label>
                        <InputText @bind-Value="cliente.Direccion" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Direccion)" />
                    </div>
                </div>
            </div>
        </div>

        <div class="card-footer text-center" style="background-color: #5D5C61;">
            <button type="button" class="btn btn-primary bi bi-arrow-repeat" @onclick="Nuevo">Nuevo</button>
            <button type="button" class="btn btn-success bi bi-floppy-fill" @onclick="Guardar">Guardar</button>
            <button name="btAtras" id="btAtras" class="btn btn-secondary mr-2" @onclick="Atras" type="button">
                <span class="bi bi-arrow-return-left"></span>Volver Atrás
            </button>
        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public int ClienteId { get; set; }
    public Clientes cliente { get; set; } = new Clientes();
    public string Mensaje = " ";
    private bool Guardo = false;

    protected override async Task OnInitializedAsync()
    {
        if (ClienteId > 0)
        {
            this.cliente.ClienteId = ClienteId;
            await this.Buscar();
        }

        cliente.FechaCreacion = DateTime.Now;
    }
    public async Task Buscar()
    {
        var clienteEncontrado = await clienteservice.Buscar(cliente.ClienteId);

        if (clienteEncontrado != null)
        {
            this.cliente = clienteEncontrado;
        }
    }
    public void Nuevo()
    {
        cliente = new Clientes();
    }


    public async Task Guardar()
    {
        var nombreExistente = await clienteservice.ValidarNombre(cliente.Nombre);
        if (nombreExistente)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "El nombre ya existe.",
                    Duration = 5000
                };
            NotificationService.Notify(mensaje);
            return;
        }

        var cedulaExistente = await clienteservice.ValidarCedula(cliente.Cedula);
        if (cedulaExistente)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "La cédula ya existe.",
                    Duration = 5000
                };
            NotificationService.Notify(mensaje);
            return;
        }

        await clienteservice.Guardar(cliente);
        Guardo = true;
        var mensajeExito = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Éxito",
                Detail = "Cliente guardado exitosamente.",
                Duration = 5000
            };
        NotificationService.Notify(mensajeExito);
    }

    void Atras()
    {
        Navigation.NavigateTo("/IndexClientes");
    }
}

@page "/CreateCliente"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject ClientesServices clienteservice

<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card" style="max-width: 1000px; margin: 0 auto;">
        <div class="card-header" style="background-color: #5D5C61; color: white; text-align: center;">
            <img src="/Images/clientes.png" alt="Titulo" style="max-width: 50%; height: auto; margin-bottom: 10px;">
            <h1>Crear Cliente</h1>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Fecha:</label>
                        <InputDate @bind-Value="cliente.FechaCreacion" class="form-control" />
                        <ValidationMessage For="@(() => cliente.FechaCreacion)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Nombre:</label>
                        <InputText @bind-Value="cliente.Nombre" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Nombre)" />
                    </div>
                    <div class="form-group">
                        <label>Apellido:</label>
                        <InputText @bind-Value="cliente.Apellido" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Apellido)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Cédula:</label>
                        <InputText @bind-Value="cliente.Cedula" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Cedula)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Teléfono:</label>
                        <InputText @bind-Value="cliente.Telefono" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Telefono)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Email:</label>
                        <InputText @bind-Value="cliente.Email" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Email)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Dirección:</label>
                        <InputText @bind-Value="cliente.Direccion" class="form-control" />
                        <ValidationMessage For="@(() => cliente.Direccion)" />
                    </div>
                </div>
            </div>
        </div>

        <div class="card-footer text-center" style="background-color: #5D5C61;">
            <button type="button" class="btn btn-success bi bi-floppy-fill" @onclick="Guardar">Guardar</button>
            <button name="btNuevo" id="btNuevo" class="btn btn-primary mr-2" @onclick="Atras" type="button">
                <span class="bi bi-arrow-return-left"></span>Volver Atrás
            </button>
        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public int ClienteId { get; set; }
    public Clientes cliente { get; set; } = new Clientes();
    public string Mensaje = " ";
    private bool nombreexistente = false;
    private bool cedulaexistente = false;
    private bool Guardo = false;

    protected override async Task OnInitializedAsync()
    {
        if (ClienteId > 0)
        {
            this.cliente.ClienteId = ClienteId;
            await this.Buscar();
        }

        cliente.FechaCreacion = DateTime.Now;
    }
    public async Task Buscar()
    {
        var clienteEncontrado = await clienteservice.Buscar(cliente.ClienteId);

        if (clienteEncontrado != null)
        {
            this.cliente = clienteEncontrado;
        }
    }
    public async Task Guardar()
    {
        await clienteservice.Guardar(cliente);
        Guardo = true;
    }

    void Atras()
    {
        Navigation.NavigateTo("/MenuClientes");
    }
}

@page "/IndexCompra"
@rendermode InteractiveServer
@inject ComprasService comprasService
@inject InsumosService insumosService
@inject ProveedoresService proveedoresService
@inject NavigationManager navigationManager

<div class="card" style="max-width: 1400px; margin: 40px auto;">
    <div class="card-header" style="background-color: #5D5C61;">
        <div class="row align-items-center justify-content-center">
            <div class="col-3">
                <img src="/Images/pedido.png" alt="pan" style="max-width: 50%; height: auto;">
            </div>
            <div class="col-9">
                <h1 style="text-align: center; color: #FFFFFF;"><strong>Consulta de Compras</strong></h1>
            </div>
        </div>
    </div>

    <div class="card-body">
        <!-- Filtro de búsqueda de compras -->
        <div class="row mt-3">
            <div class="col-3">
                <label>Filtrar Por</label>
                <select @bind="Opcion" class="form-select">
                    <option value="0">Todo</option>
                    <option value="1">CompraId</option>
                    <!-- Agrega más opciones de filtro según sea necesario -->
                </select>
            </div>
            @if (Opcion == 1)
            {
                <div class="col-3">
                    <label>ID</label>
                    <div class="input-group">
                        <input type="number" @bind="CompraId" class="form-control" />
                    </div>
                </div>
            }
            <!-- Agrega más bloques de código para otros tipos de filtro -->
            <div class="col-3">
                <label>Desde:</label>
                <input type="date" @bind="Desde" class="form-control" />
            </div>
            <div class="col-3">
                <label>Hasta:</label>
                <input type="date" @bind="Hasta" class="form-control" />
            </div>
            <div class="col-3">
                <button type="button" @onclick="Buscar" class="btn btn-primary mt-4">
                    <i class="bi bi-search"></i> Buscar
                </button>
            </div>
        </div>

        <!-- Tabla de resultados -->
        <table class="table table-striped table-bordered mt-4">
            <thead>
                <tr>
                    <th scope="col">Concepto</th>
                    <th scope="col">Proveedor</th>
                    <th scope="col">Fecha Pedida</th>
                    <!-- Agrega más columnas según sea necesario -->
                    <th scope="col">Ver</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var compra in ListaCompras)
                {
                    var proveedor = ProveedoresList.FirstOrDefault(p => p.ProveedorId == compra.ProveedorId);
                    <tr>
                        <td>@compra.Observaciones</td>
                        <td>@(proveedor != null ? proveedor.Nombre : "No encontrado")</td>
                        <td>@compra.FechaPedida.ToShortDateString()</td>
                        <!-- Agrega más columnas según sea necesario -->
                        <td>
                            <div style="text-align:center">
                                <a href="/ViewCompras/@compra.CompraId" class="btn btn-outline-primary bi bi-eye"></a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public List<Compras> ListaCompras { get; set; } = new List<Compras>();
    public List<Insumos> InsumosList { get; set; } = new List<Insumos>();
    public List<Proveedores> ProveedoresList { get; set; } = new List<Proveedores>();
    public int Opcion { get; set; } = 0;
    public int CompraId { get; set; }
    public DateTime Desde { get; set; }
    public DateTime Hasta { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarCompras();
    }

    public async Task CargarCompras()
    {
        InsumosList = await insumosService.Listar(t => true);
        ProveedoresList = await proveedoresService.Listar(t => true);
        ListaCompras = await comprasService.Listar(t => true);
        Desde = DateTime.Now.AddMonths(-1);
        Hasta = DateTime.Now;
    }

    public async Task Buscar()
    {
        Hasta = new DateTime(Hasta.Year, Hasta.Month, Hasta.Day, 23, 59, 59);

        switch (Opcion)
        {
            case 0:
                ListaCompras = await comprasService.Listar(t => t.FechaPedida >= Desde && t.FechaPedida <= Hasta);
                break;
            case 1:
                ListaCompras = await comprasService.Listar(t => t.CompraId == CompraId && t.FechaPedida >= Desde && t.FechaPedida <= Hasta);
                break;
            // Agrega más casos para otros tipos de filtro si es necesario
            default:
                break;
        }
    }
}

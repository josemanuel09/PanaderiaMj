@page "/CreateCompras"
@page "/CreateCompras/{CompraId:int}"
@inject ComprasService comprasService
@inject NavigationManager navigationManager
@inject InsumosService insumosService
@inject ProveedoresService proveedoresService
@inject NotificationService NotificationService
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<RadzenNotification />
<EditForm Model="compra" OnValidSubmit="Guardar">
    <div class="card" style="max-width: 1000px; left: 50%; transform: translate(-50%);">
        <!-- Encabezado de la Página -->
        <div class="card-header" style="background-color: #5D5C61">
            <div class="row" style="flex-direction: row; align-items: center;">
                <div class="col-3">
                    <div style="width: 100%; display: flex; justify-content: center;">
                        <img src="Images/agregarcompra.png" alt="pan" style="max-width: 100%; height: auto;">
                    </div>
                </div>
                <div class="col-9">
                    <h1 style="text-align: center; color: #FFFFFF;"><strong>Crear Compra</strong></h1>
                </div>
            </div>
        </div>

        <div class="card-body">
            <!-- Id y botón buscar -->
            @* <div class="row">
                <div class="col-6">
                    <label for="txtId" class="form-label">Compra Id:</label>
                    <div class="input-group">
                        <input type="number" id="txtId" class="form-control" @bind-value="compra.CompraId">
                    </div>
                </div>
            </div> *@
            <div class="row">
                <!-- Proveedor y Método de Pago -->
                <div class="col-6">
                    <label for="txtProveedor" class="form-label"> Proveedor:</label>
                    <InputSelect class="form-select" @bind-Value="compra.ProveedorId">
                        <option value="0" selected hidden>Seleccione...</option>
                        @foreach (var proveedor in ProveedoresList)
                        {
                            <option value="@proveedor.ProveedorId">@proveedor.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => compra.ProveedorId)" />
                </div>
                <div class="col-6">
                    <label for="txtMetodoPago" class="form-label"> M&eacute;todo de Pago:</label>
                    <InputSelect class="form-select" @bind-Value="compra.MetodoDePago">
                        <option value="0" selected hidden>Seleccione...</option>
                        @foreach (var metodo in MetodoPago)
                        {
                            <option value="@metodo">@metodo</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => compra.MetodoDePago)" />
                </div>


            </div>
            <div class="row">
                <!-- Monto Total y Fecha Pedida -->

                <div class="col-6">
                    <label for="txtFechaPedida" class="form-label"> Fecha Pedida:</label>
                    <input type="date" id="txtFechaPedida" class="form-control" @bind-value="compra.FechaPedida">
                    <ValidationMessage For="@(() => compra.FechaPedida)" />
                </div>
            </div>
            <div class="row">
                <!-- Observaciones -->
                <div class="col-12">
                    <label for="txtObservaciones" class="form-label"> Observaciones:</label>
                    <input type="text" id="txtObservaciones" class="form-control" @bind-value="compra.Observaciones">
                </div>
            </div>
            <!-- Agregar Detalle -->
            <div class="row">
                <div class="col-12 mt-3">
                    <div class="card card-header">
                        <h5>Agregar Detalle</h5>
                        <div class="row">
                            <div class="col-3">
                                <label for="txtInsumo" class="form-label"> Insumo:</label>
                                <InputSelect class="form-select" @bind-Value="compraDetalle.InsumoId">
                                    <option value="0" selected hidden>Seleccione....</option>
                                    @foreach (var insumo in InsumosList)
                                    {
                                        <option value="@insumo.InsumoId">@insumo.Nombre</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => compraDetalle.InsumoId)" />
                            </div>
                            <div class="col-3">
                                <label for="txtCantidad" class="form-label"> Cantidad:</label>
                                <input type="number" id="txtCantidad" class="form-control" @bind-value="compraDetalle.Cantidad">
                                <ValidationMessage For="@(() => compraDetalle.Cantidad)" />
                            </div>
                            <div class="col-3">
                                <label for="txtPrecio" class="form-label"> Precio:</label>
                                <input type="number" id="txtPrecio" class="form-control" @bind-value="compraDetalle.Precio">
                                <ValidationMessage For="@(() => compraDetalle.Precio)" />
                            </div>
                            <div class="col-2">
                                <br />
                                <button name="btnAgregar" id="btnAgregar" class="btn btn-primary" @onclick="AgregarDetalle" type="button">
                                    <span class="bi bi-plus-circle"></span> Agregar
                                </button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <!-- Tabla detalle -->
            <div class="table-responsive mt-3">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Insumo</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in compra.ComprasDetalle)
                        {
                            var insumo = InsumosList.FirstOrDefault(i => i.InsumoId == detalle.InsumoId);
                            <tr>
                                <td>@(insumo != null ? insumo.Nombre : "No encontrado")</td>
                                <td>@detalle.Cantidad</td>
                                <td>@detalle.Precio</td>
                                <td>
                                    <button name="BtnEliminar" id="BtnEliminar" class="btn btn-danger mr-2" @onclick="@(() => EliminarDetalle(detalle))">
                                        <span class="bi bi-trash"></span> Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>

                    <div class="col-6">
                        <label for="txtMontoTotal" class="form-label"> Monto Total:</label>
                        <h4 type="number" id="txtMontoTotal" class="form-control">@compra.MontoTotal</h4>
                    </div>
                </table>
            </div>
            <DataAnnotationsValidator />
        </div>

        <!-- Pie de página con botones -->
        <div class="card-footer text-center fs-5" style="background-color: #5D5C61">
            <!-- Botones -->
            <button name="btNuevo" id="btNuevo" class="btn btn-primary mr-2" @onclick="Nuevo" type="button">
                <span class="bi bi-plus-circle"></span> Nuevo
            </button>
            <button name="btnGuardar" id="btnGuardar" class="btn btn-success mr-2" @onclick="Guardar" type="button">
                <span class="bi bi-download"></span> Guardar
            </button>
            <button name="btnVolver" id="btnVolver" class="btn btn-secondary" @onclick="Atras" type="button">
                <span class="bi bi-arrow-left-square-fill"></span> Volver Atrás
            </button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int CompraId { get; set; }
    public List<Insumos> InsumosList { get; set; } = new List<Insumos>();
    public List<Proveedores> ProveedoresList { get; set; } = new List<Proveedores>();
    public Compras compra { get; set; } = new Compras();
    public ComprasDetalle compraDetalle { get; set; } = new ComprasDetalle();
    public bool Condicion { get; set; } = false;
    public List<ComprasDetalle> InsumosAgregados { get; set; } = new List<ComprasDetalle>();
    public List<ComprasDetalle> InsumosEliminados { get; set; } = new List<ComprasDetalle>();
    public List<String> MetodoPago { get; set; } = new List<String> { "Contado", "Credito" };

    protected override async Task OnInitializedAsync()
    {
        InsumosList = await insumosService.Listar(t => true);
        ProveedoresList = await proveedoresService.Listar(t => true);
        compra.FechaPedida = DateTime.Now;
    }
    public async Task Guardar()
    {
        // Validar que la lista de detalles de compra no esté vacía
        if (compra.ComprasDetalle.Count == 0)
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Debe agregar al menos un detalle de compra.",
                    Duration = 5000
                };
            NotificationService.Notify(mensajeError);
            return;
        }

        var Guardado = await comprasService.Guardar(compra);
        if (!Guardado) { return; }
        InsumosList = await insumosService.Listar(t => true);

        foreach (var InsumoAgregado in InsumosAgregados)
        {
            var insumo = InsumosList.FirstOrDefault(I => I.InsumoId == InsumoAgregado.InsumoId);
            if (insumo != null)
            {
                insumo.CantidadDisponible -= InsumoAgregado.Cantidad;
                await insumosService.Guardar(insumo);
            }
        }

        foreach (var InsumoEliminado in InsumosEliminados)
        {
            var insumo = InsumosList.FirstOrDefault(I => I.InsumoId == InsumoEliminado.InsumoId);
            if (insumo != null)
            {
                insumo.CantidadDisponible += InsumoEliminado.Cantidad;
                await insumosService.Guardar(insumo);
            }
        }
        InsumosAgregados = new List<ComprasDetalle>();
        InsumosEliminados = new List<ComprasDetalle>();

        var mensajeExito = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Éxito",
                Detail = "Compra guardada exitosamente.",
                Duration = 5000
            };
        NotificationService.Notify(mensajeExito);
    }


    public void AgregarDetalle()
    {
        if (compraDetalle.InsumoId != 0 && compraDetalle.Cantidad != 0 && compraDetalle.Precio != 0)
        {
            var Insumo = InsumosList.FirstOrDefault(i => i.InsumoId == compraDetalle.InsumoId);
            if (Insumo != null && compraDetalle.Cantidad <= Insumo.CantidadDisponible)
            {
                compra.ComprasDetalle.Add(compraDetalle);
                compra.MontoTotal += compraDetalle.Cantidad * compraDetalle.Precio;
                InsumosAgregados.Add(compraDetalle);
                InsumosEliminados.Remove(compraDetalle);
                var mensajeExito = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Éxito",
                        Detail = "Detalle de compra agregado correctamente.",
                        Duration = 5000
                    };
                NotificationService.Notify(mensajeExito);
                compraDetalle = new ComprasDetalle();
                

            }
            else
            {
                var mensajeError = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "La cantidad solicitada supera la cantidad disponible del insumo.",
                        Duration = 5000
                    };
                NotificationService.Notify(mensajeError);
                return;
            }
        }
        else
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Debe completar todos los campos para agregar el detalle de compra.",
                    Duration = 5000
                };
            NotificationService.Notify(mensajeError);
            return;
        }
    }


    public void EliminarDetalle(ComprasDetalle detalle)
    {
        compra.ComprasDetalle.Remove(detalle);
        compra.MontoTotal -= detalle.Cantidad * detalle.Precio;
        InsumosEliminados.Add(detalle);
        InsumosAgregados.Remove(detalle);
    }
    public void Nuevo()
    {
        compra = new Compras();
        compraDetalle = new ComprasDetalle();
        InsumosAgregados = new List<ComprasDetalle>();
        InsumosEliminados = new List<ComprasDetalle>();

    }
    public void Atras()
    {
        navigationManager.NavigateTo("/MenuCompras");
    }


}

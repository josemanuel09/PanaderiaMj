@page "/DeleteProveedores"
@page "/DeleteProveedores/{ProveedorId:int}"
@inject ProveedoresService proveedoresService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject NotificationService NotificationService
@rendermode InteractiveServer

<RadzenNotification />
<PageTitle>Eliminar Proveedor</PageTitle>
<div class="container">
    <div class="card shadow-header">
        <!-- Header -->
        <div class="card-header">
            <h3><strong>Eliminar Proveedor</strong></h3>
        </div>
        <div class="card-header">
            <h3 class="text-danger">¿Est&aacute;s seguro de que quieres eliminar el proveedor?</h3>
        </div>
        <!-- Body -->
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <div class="card shadow-lg">
                        <div class="card-header">
                            <h3 class="text-center"><strong>Datos del proveedor</strong></h3>
                        </div>
                        <div class="card-body">
                            <div class="border-primary border-2 borde">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4 text-center">
                                            <img src="Images/proveedor.png" class="img-fluid" alt="Proveedor">
                                        </div>
                                        <div class="col-md-8">
                                            <ul class="list-unstyled">
                                                <li><strong>ProveedorId:</strong> @proveedor.ProveedorId</li>
                                                <li><strong>Nombre:</strong> @proveedor.Nombre</li>
                                                <li><strong>Correo Electr&oacute;nico:</strong> @proveedor.Email</li>
                                                <li><strong>Tel&eacute;fono:</strong> @proveedor.Telefono</li>
                                                <li><strong>RNC:</strong> @proveedor.RNC</li>
                                                <li><strong>Tipo de Contribuyente:</strong> @proveedor.TipoContribuyente</li>
                                                <li><strong>Fecha de Creaci&oacute;n:</strong> @proveedor.Fecha</li>
                                                <li><strong>Direcci&oacute;n:</strong> @proveedor.Direccion</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
               
            </div>
        </div>
        <!-- Footer -->
        <div class="card-footer">
            <button type="button" class="btn btn-outline-danger" @onclick="EliminarProveedor"><i class="bi bi-trash-fill"></i> Eliminar</button>
            <button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left"></i> Volver</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int ProveedorId { get; set; }
    public Proveedores proveedor { get; set; } = new Proveedores();

    protected override async Task OnInitializedAsync()
    {
        if (ProveedorId > 0)
        {
            proveedor.ProveedorId = ProveedorId;
            await this.Buscar();
        }
    }

    public async Task Buscar()
    {
        var proveedorEncontrado = await proveedoresService.Buscar(proveedor.ProveedorId);

        if (proveedorEncontrado != null)
        {
            proveedor = proveedorEncontrado;
        }
    }

    public async Task EliminarProveedor()
    {
        if (!await proveedoresService.Existe(proveedor.ProveedorId))
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "El proveedor que intenta eliminar no existe.",
                    Duration = 5000
                };
            NotificationService.Notify(mensajeError);
            return;
        }

        if (await proveedoresService.Eliminar(proveedor))
        {
            var mensajeExito = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Éxito",
                    Detail = "El proveedor se ha eliminado correctamente.",
                    Duration = 5000
                };
            NotificationService.Notify(mensajeExito);
            Volver();
        }
        else
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se pudo eliminar el proveedor.",
                    Duration = 5000
                };
            NotificationService.Notify(mensajeError);
        }
    }

    public void Volver()
    {
        navigationManager.NavigateTo("/IndexProveedores");
    }
}
